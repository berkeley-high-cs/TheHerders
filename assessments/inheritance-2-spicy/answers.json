[
  "public Expression {\n  public int precedence;\n  public Expression(int precendence){\n    this.precendence = precendence;\n  }\npublic double evaluate(){\n  return Double.NaN;\n}\npublic boolean higherPrecendanceThan(Expression expression){\n  return this.precedence > expression.precendence;\n}\n}\n\n\n\n\n\n",
  "public Number extends Expression{\n  private double value;\n  public Number(double value){\n    super(1);\n    this.value = value;\n  }\n  public double evaluate(){\n    return value;\n  }\n  public String toString(){\n    return \"\" + value;\n  }\n}\n\n\n\n\n\n",
  "public BinaryOperator extends Expression{\n\n  private Expression leftExpression;\n  private Expression rightExpression;\n  private String operator;\n  public BinaryOperator(int precedence, Expression leftExpression, Expression rightExpression, String operator){\n    super(precendence);\n    this.leftExpression = leftExpression;\n    this.rightExpression = rightExpression;\n    this.operator = operator;\n  }\n  public Expression getLeft(){\n    return leftExpression;\n  }\n  public Expression getRight(){\n    return rightExpression;\n  }\n  public String toString(){\n    if (higherPrecendenceThan(leftExpression) || higherPrecedenceThan(rightExpression)){\n      return \"(\" + leftExpression + operator + rightExpression + \")\" ;\n    } else {\n      return leftExpression + operator + rightExpression;\n    }\n    \n  }\n}\n\n\n\n\n\n",
  "public Addition extends BinaryOperator {\n  public Addition(Expression leftExpression, Expression rightExpression) {\n    super(3, leftExpression, rightExpression, \"+\");\n  }\n  public double evaluate(){\n    return leftExpression.evaluate() + rightExpression.evaluate();\n  }\n}\n\n\n\n\n\n",
  "public Multiplication extends BinaryOperator{\n  public Multiplication(Expression leftExpression, Expression rightExpression){\n    super(2, leftExpression, rightExpression, \"*\");\n  }\n  public double evaluate(){\n    return leftExpression.evaluate() * rightExpression.evaluate();\n  }\n}\n\n\n\n\n\n",
  "public LoggingAddition extends Addition{\n  public LoggingAddition()\n}\n\n\n\n\n\n"
]